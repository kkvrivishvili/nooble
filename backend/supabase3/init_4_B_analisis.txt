-- Análisis del archivo init_4.sql - Tablas para RAG (Retrieval Augmented Generation)

-- ==============================================
-- ARCHIVO: init_4.sql - Tablas para RAG (Retrieval Augmented Generation) - ANÁLISIS
-- ==============================================
-- Resumen del Propósito:
-- El archivo init_4.sql crea las tablas esenciales para implementar Retrieval Augmented Generation (RAG),
-- incluyendo tablas para bots, colecciones de documentos, chunks vectoriales, conversaciones, mensajes y analíticas vectoriales.
-- El script se enfoca en la configuración dinámica de la dimensión vectorial y el particionamiento de la tabla de analíticas.

-- ---------- SECCIÓN PRELIMINAR: VERIFICACIONES INICIALES - ANÁLISIS ----------
-- **DEPENDENCIA CLAVE DETECTADA**:  Verificación de la extensión `vector` y la tabla `app.users` mediante bloques `DO $$ BEGIN IF NOT EXISTS (...) THEN RAISE EXCEPTION ... END IF; END $$;`.
--  **OK**: CORRECT and crucial dependency checks. Ensures `init_1.sql` (for `vector` extension) and `init_2.sql` (for `app.users`) are executed beforehand.  `RAISE EXCEPTION` is appropriate here to halt execution if dependencies are missing, enforcing correct setup order.
-- OK: Obtención de la `vector_dimension` desde `app.system_config` o uso de valor por defecto (1536).
-- OK: Uso de `PERFORM set_config('my.vector_dimension', vector_dim::text, false);` para almacenar la dimensión vectorial en una variable de configuración local dentro de la sesión.  This is a good practice for dynamically configuring subsequent table definitions within the same script execution.
-- OK: `RAISE NOTICE` to confirm the configured vector dimension.

-- ---------- SECCIÓN 1: TABLAS PRINCIPALES DE RAG - ANÁLISIS ----------
-- **INCONSISTENCIA DETECTADA**: Redundancia de comandos DROP TABLE (again, the pattern continues). **Recomendación: Remove redundant DROP TABLE statements.**
-- OK: Tabla `public.bots` para almacenar información de bots personalizados. Correctly placed in `public` schema.
-- OK: Foreign Key `user_id UUID NOT NULL REFERENCES app.users(id) ON DELETE CASCADE`.
-- OK: CHECK constraints for `temperature`, `max_tokens`, `avatar_url` (URL validation).
-- OK: `model_config JSONB NOT NULL DEFAULT '{}'` for flexible bot model configuration.
-- OK: Indices `idx_unique_user_bot_name`, `idx_bots_tags`, `idx_bots_category`, `idx_bots_public`, `idx_bots_active` are well-chosen for bot management and discovery queries.
-- OK: Tabla `app.document_collections` para colecciones de documentos. Correctly in `app` schema.
-- OK: Foreign Key `user_id UUID NOT NULL REFERENCES app.users(id) ON DELETE CASCADE`.
-- OK: `embedding_model VARCHAR(50) DEFAULT 'text-embedding-ada-002'` with default embedding model specified.
-- OK: `metadata_schema JSONB DEFAULT '{}'` for flexible metadata schema per collection.
-- OK: Indices `idx_unique_user_collection_name`, `idx_collections_tags`, `idx_collections_category`, `idx_collections_public`, `idx_collections_user` are appropriate for collection management.
-- OK: Tabla `app.documents` for individual documents within collections. Correctly in `app` schema.
-- OK: Foreign Key `collection_id UUID NOT NULL REFERENCES app.document_collections(id) ON DELETE CASCADE`.
-- OK: `content_hash TEXT` for content de-duplication. `processing_status` with CHECK constraint for document processing lifecycle.
-- OK: `source_url TEXT CHECK (...)` for URL validation.
-- OK: Indices `idx_documents_collection`, `idx_documents_title_trgm`, `idx_documents_content_hash`, `idx_documents_status`, `idx_documents_metadata`, `idx_documents_language` are good for document querying and processing.
-- OK: Tabla `app.document_chunks` creada dinámicamente usando `EXECUTE format(...)` para incorporar la `vector_dimension` configurada previamente.
--  **OK**: This is a correct and effective way to handle dynamic vector dimensions.
-- OK: Foreign Key `document_id UUID NOT NULL REFERENCES app.documents(id) ON DELETE CASCADE`.
-- OK: `content_vector vector(%s)` uses the dynamically configured dimension.
-- OK: Indices `idx_document_chunks_document`, `idx_document_chunks_content_trgm`, `idx_document_chunks_metadata`, `idx_document_chunks_relevance` are appropriate for chunk retrieval and similarity searches.
-- OK: Tabla `app.bot_collections` for many-to-many relationship between bots and document collections. Correctly in `app` schema.
-- OK: Composite Primary Key `PRIMARY KEY(bot_id, collection_id)`.
-- OK: Foreign Keys `bot_id UUID NOT NULL REFERENCES public.bots(id) ON DELETE CASCADE`, `collection_id UUID NOT NULL REFERENCES app.document_collections(id) ON DELETE CASCADE`.
-- OK: Indices `idx_bot_collections_collection`, `idx_bot_collections_bot` for relationship queries.

-- ---------- SECCIÓN 2: TABLAS DE INTERACCIÓN - ANÁLISIS ----------
-- OK: Tabla `public.conversations` for storing conversation metadata. Correctly in `public` schema.
-- OK: Foreign Keys `user_id UUID NOT NULL REFERENCES app.users(id) ON DELETE CASCADE`, `bot_id UUID NOT NULL REFERENCES public.bots(id) ON DELETE CASCADE`.
-- OK: Indices `idx_conversations_user`, `idx_conversations_bot`, `idx_conversations_public`, `idx_conversations_pinned`, `idx_conversations_recent` are suitable for conversation retrieval and management.
-- OK: Tabla `public.messages` for storing messages within conversations, created dynamically with `EXECUTE format(...)` for `vector_dimension`.
--  **OK**: Correct dynamic dimension handling.
-- OK: Foreign Key `conversation_id UUID NOT NULL REFERENCES public.conversations(id) ON DELETE CASCADE`, `source_message_id UUID REFERENCES public.messages(id) ON DELETE SET NULL` (for message threads/replies).
-- OK: `embedding vector(%s)` uses dynamic dimension. `citation_sources JSONB DEFAULT '[]'::jsonb` for storing citation info from RAG.
-- OK: Indices `idx_messages_conversation`, `idx_messages_source`, `idx_messages_user_type`, `idx_messages_content_search` are appropriate for message querying.
-- OK: Tabla `app.bot_response_feedback` for user feedback on bot responses. Correctly in `app` schema.
-- OK: Foreign Keys `message_id UUID NOT NULL REFERENCES public.messages(id) ON DELETE CASCADE`, `user_id UUID NOT NULL REFERENCES app.users(id) ON DELETE CASCADE`, `fixed_by_message_id UUID REFERENCES public.messages(id) ON DELETE SET NULL` (linking feedback to a 'fixed' message, potentially for corrections).
-- OK: `rating INTEGER NOT NULL CHECK (rating BETWEEN 1 AND 5)`. `feedback_categories TEXT[]`.
-- OK: Indices `idx_feedback_message`, `idx_feedback_user`, `idx_feedback_categories`, `idx_feedback_rating` for feedback analysis.

-- ---------- SECCIÓN 3: ANALÍTICA VECTORIAL PARTICIONADA - ANÁLISIS ----------
-- OK: Tabla `app.vector_analytics` for storing vector search analytics, created dynamically with `EXECUTE format(...)` and partitioned by `created_at`. Correctly in `app` schema.
--  **OK**: Correct dynamic dimension and partitioning implementation.
-- OK: `PARTITION BY RANGE (created_at)`. `PRIMARY KEY (id, created_at)`.
-- OK: Foreign Keys `user_id UUID NOT NULL REFERENCES app.users(id) ON DELETE CASCADE`, `bot_id UUID REFERENCES public.bots(id) ON DELETE SET NULL`.
-- OK: `query_vector vector(%s)` with dynamic dimension. `filter_criteria JSONB`, `metadata JSONB`.
-- OK: Function `create_vector_analytics_partition()` and trigger `create_vector_analytics_partition_trigger` for automatic partition creation based on `created_at` before insert.
--  **OK**: Correctly implemented partition creation logic.  The function:
    -- Determines partition name based on month.
    -- Creates partition table if it doesn't exist using `CREATE TABLE IF NOT EXISTS app.%I PARTITION OF app.vector_analytics FOR VALUES FROM (...) TO (...)`.
    -- Creates indexes (user_idx, date_idx, bot_idx, vector_idx) on each partition with unique names using timestamps to avoid collision.
    -- Proactively creates partitions for the current month, next month, and the month after next.
-- OK: Initial partition creation using `DO $$ ... LOOP ... END LOOP $$;` to create partitions for past, current, and future months (-3 to +2 months).
--  **OK**:  Good proactive partition creation for initial setup covering a reasonable time range.

-- ---------- SECCIÓN 4: ÍNDICES VECTORIALES Y ACTUALIZACIONES DINÁMICAS - ANÁLISIS ----------
-- OK: Creation of IVFFlat vector indexes using `EXECUTE` and `format`, after retrieving `vector_dimension`.
--  **OK**: Dynamically creates vector indexes with correct dimensions for `app.document_chunks.content_vector`, `public.messages.embedding`, and `app.vector_analytics.query_vector`. `WITH (lists = 100)` is set for IVFFlat, a reasonable starting value.
-- OK: Function `update_vector_fields_to_current_dimension()` for dynamically updating vector column types and recreating vector indexes if `vector_dimension` in `system_config` is changed.
--  **OK**:  Function correctly:
    -- Retrieves `vector_dimension` from `app.system_config` (or defaults to 1536 if not found).
    -- Updates column types for `app.document_chunks.content_vector`, `public.messages.embedding`, and `app.vector_analytics.query_vector` using `ALTER TABLE ... ALTER COLUMN ... TYPE vector(%s)`.
    -- Drops and recreates vector indexes `idx_document_chunks_vector`, `idx_messages_embedding`, `idx_vector_analytics_vector`.
    -- Loops through `vector_analytics_y%m%` partitions and drops/recreates vector indexes on each.
--  **POTENTIAL ISSUE**: `update_vector_fields_to_current_dimension()` is designed for *dynamic updates*, but it is *not automatically triggered*. It's a function that needs to be *manually executed* if the `vector_dimension` in `system_config` is changed.  This is acceptable if dimension changes are infrequent and intended to be admin-initiated. **Clarify if dynamic dimension updates are intended to be fully automatic or admin-driven. If automatic, a trigger would be needed. If admin-driven, documentation on when and how to run this function is important.**

-- ---------- SECCIÓN FINAL: NOTIFICACIÓN - ANÁLISIS ----------
-- OK: `RAISE NOTICE` messages to confirm table creation and vector dimension configuration.

-- ==============================================
-- RESUMEN GENERAL DEL ARCHIVO init_4.sql - INCONSISTENCIAS Y SUGERENCIAS
-- ==============================================
-- INCONSISTENCIA PRINCIPAL DETECTADA:
--  - **Redundant DROP TABLE statements**:  Still present, needs to be cleaned up. **RECOMENDACIÓN: Remove redundant DROP TABLE statements.**

-- PUNTOS FUERTES:
--  - **Dynamic Vector Dimension Handling**: Excellent use of `EXECUTE format(...)` and session-local configuration (`set_config`, `current_setting`) to dynamically create tables and indexes with the vector dimension read from `system_config`.
--  - **Partitioning for `vector_analytics`**:  Correctly implemented range partitioning by month for the analytics table with automatic partition creation and proactive partition generation.
--  - **Comprehensive Indexing**: Well-chosen indexes for all tables, including IVFFlat vector indexes for similarity searches.
--  - **Dependency Checks**:  Essential dependencies on `vector` extension, `app.users`, `app.system_config` are checked.

-- SUGERENCIAS DE MEJORA:
--  1. **Eliminate redundant DROP commands**: Clean up the DROP sections.
--  2. **Clarify `vector_dimension` Update Automation**: Document whether `vector_dimension` updates are intended to be fully automatic or admin-driven. If admin-driven, provide clear instructions on when and how to execute `update_vector_fields_to_current_dimension()`. If automatic updates are needed, implement a trigger on `app.system_config` to call this function when `vector_dimension` is changed.
--  3. **Consider Error Handling in Partition Creation**: While partition creation has `BEGIN...EXCEPTION WHEN OTHERS THEN RAISE WARNING...END;`, consider if more specific exception handling and logging would be beneficial for troubleshooting partition creation issues in production.

-- PRÓXIMO PASO:
--  Please provide the next file, `init_5.sql`, to continue the analysis and ensure consistency across the initialization script sequence. `init_4.sql` is a well-structured script for RAG table creation with excellent dynamic dimension handling and partitioning.  The main areas for improvement are documentation clarity regarding dimension updates and cleaning up redundant DROP statements.