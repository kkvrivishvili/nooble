-- Análisis del archivo init_1.sql - Configuración Inicial y Extensiones

-- ==============================================
-- ARCHIVO: init_1.sql - Configuración Inicial y Extensiones - ANÁLISIS
-- ==============================================
-- Resumen del Propósito:
-- El archivo init_1.sql establece la base de la base de datos, 
-- configurando esquemas, extensiones esenciales, sistema de configuración global,
-- funciones de utilidad para acceder a la configuración y un sistema de auditoría básica para la configuración.

-- ---------- SECCIÓN 1: ESQUEMAS Y EXTENSIONES - ANÁLISIS ----------
-- OK: Creación de esquemas (extensions, app, auth, audit) bien definidos para la organización.
-- OK: Modificación del search_path es útil para simplificar el acceso dentro de la misma sesión, 
--     pero en produccion  podría ser preferible usar prefijos de esquema explícitos para mayor claridad y seguridad.
-- OK: Configuración inicial de la base de datos (encoding, strings, timezone) son configuraciones estándar y correctas.
-- OK: Habilitación de extensiones (uuid-ossp, pg_trgm, vector, pgcrypto) en el esquema 'extensions' es una buena práctica de seguridad y organización.
-- **PRECAUCIÓN**: La inclusión de `DROP TABLE IF EXISTS app.system_config CASCADE;` y `DROP FUNCTION IF EXISTS get_vector_dimension() CASCADE;` 
--                en un script de "configuración *inicial*" es inusual y potencialmente destructivo. 
--                Esto sugiere que `init_1.sql` podría ser diseñado para ser re-ejecutado, 
--                lo cual debería estar documentado. Si no es la intención, estas líneas deberían ser removidas 
--                para evitar la eliminación accidental de datos y la función si el script se ejecuta más de una vez.
--                **Inconsistencia detectada:**  El nombre "init_1.sql" sugiere configuración inicial, pero incluye comandos DROP que borran objetos existentes.

-- ---------- SECCIÓN 2: SISTEMA DE CONFIGURACIÓN GLOBAL - ANÁLISIS ----------
-- OK: Creación de la tabla `app.system_config` con una estructura robusta y bien pensada. 
--     Incluye campos para metadata como `scope`, `data_type`, `editable`, `visible_in_admin`, `requires_restart`, etc. 
--     El uso de CHECK constraints para `scope` y `data_type` asegura la integridad de los datos.
-- OK: El índice `idx_system_config_scope` optimizará las consultas basadas en el scope de la configuración.

-- ---------- SECCIÓN 3: CONFIGURACIONES INICIALES DEL SISTEMA - ANÁLISIS ----------
-- OK: Inserción de configuraciones iniciales bien categorizadas (sistema, cuotas, seguridad, API, LlamaIndex/Langchain).
-- OK: Uso de `ON CONFLICT (key) DO UPDATE SET` es excelente para asegurar idempotencia y permitir re-ejecuciones del script sin errores, 
--     actualizando las configuraciones existentes en lugar de duplicarlas.

-- ---------- SECCIÓN 4: FUNCIONES DE ACCESO A CONFIGURACIÓN - ANÁLISIS ----------
-- OK: `get_vector_dimension()` es una función simple para obtener una configuración específica, útil para compatibilidad o casos puntuales.
-- OK: `get_config(p_key TEXT, p_default TEXT DEFAULT NULL)` proporciona una forma genérica de acceder a la configuración como texto.
-- **MEJORA POTENCIAL**: `get_typed_config` es más compleja y robusta al intentar retornar la configuración con el tipo de dato correcto. 
--                     Sin embargo, la lógica de determinar el tipo basado en `pg_typeof(p_default)` y compararlo con `data_type` es un poco confusa y redundante.
--                     **Sugerencia:** Simplificar `get_typed_config` para que se base *principalmente* en el `data_type` de la tabla `system_config` para la conversión.
--                     Si `data_type` es 'integer', convertir a INTEGER, si es 'boolean', a BOOLEAN, etc. 
--                     Si hay una inconsistencia entre `data_type` y el tipo esperado, se podría retornar un error o el `p_default` con un WARNING más claro.
-- OK: Funciones de compatibilidad (`get_config_int`, `get_config_bool`, `get_config_json`) son wrappers que simplifican el uso de `get_typed_config` para tipos comunes y mejoran la legibilidad en ciertos contextos.
--     Aunque, como se mencionó, `get_typed_config` podría simplificarse y estas funciones podrían volverse menos necesarias o refactorizarse para ser más directas.

-- ---------- SECCIÓN 5: AUDITORÍA DE CONFIGURACIÓN - ANÁLISIS ----------
-- OK: Tabla `audit.config_changes` y el trigger `audit_config_changes_trigger` implementan un sistema de auditoría básico pero funcional para los cambios en la tabla `system_config`.
-- OK: El trigger captura INSERT, UPDATE y DELETE, registrando la clave, valores antiguos y nuevos, tipo de cambio, usuario y fecha.
-- OK: La inclusión de `DROP TRIGGER IF EXISTS audit_config_changes_trigger ON app.system_config;` antes de la creación del trigger es una buena práctica para asegurar que no haya triggers duplicados al re-ejecutar el script.

-- ---------- SECCIÓN FINAL: NOTIFICACIÓN - ANÁLISIS ----------
-- OK: Los `RAISE NOTICE` al final son útiles para confirmar visualmente que el script se ejecutó sin errores durante la inicialización en entornos de desarrollo o pruebas.

-- ==============================================
-- RESUMEN GENERAL DEL ARCHIVO init_1.sql - INCONSISTENCIAS Y SUGERENCIAS
-- ==============================================
-- INCONSISTENCIA PRINCIPAL DETECTADA:
--  - El script se denomina "init_1.sql" (configuración inicial) pero incluye comandos `DROP TABLE` y `DROP FUNCTION`, 
--    lo cual es inconsistente con la noción de inicialización y sugiere un comportamiento de "reset" o re-configuración.
--    **RECOMENDACIÓN:** Clarificar la intención de incluir los comandos `DROP`. Si es para re-ejecución, documentarlo claramente. 
--                      Si no es la intención, remover los comandos `DROP` para que el script sea estrictamente de inicialización.

-- SUGERENCIAS DE MEJORA:
--  1. Simplificar la lógica de `get_typed_config` para que la conversión de tipo se base principalmente en el campo `data_type` de la tabla `system_config`.
--  2. Evaluar si las funciones de compatibilidad (`get_config_int`, `get_config_bool`, `get_config_json`) son necesarias o si el uso directo de `get_typed_config` es suficiente y más claro.
--  3. Considerar si el `search_path` establecido globalmente para `current_user` es apropiado para el entorno de producción a largo plazo, o si sería mejor usar esquemas explícitos en las consultas. (Esto es menos crítico, pero buena práctica general).

-- PRÓXIMO PASO:
--  Por favor, proporciona el siguiente archivo `init_2.sql` para continuar con el análisis secuencial y verificar la consistencia entre archivos. 
--  Con el segundo archivo, podremos empezar a buscar dependencias y asegurar que la secuencia de scripts sea lógica y coherente.

-- NOTA SOBRE ERRORES DE SUPABASE (RLS Enabled No Policy):
--  Los errores "RLS Enabled No Policy" indican que has habilitado Row Level Security (RLS) en tablas (como `app.vector_analytics_y2024m12`) 
--  pero no has definido *políticas* RLS que especifiquen *quién* puede acceder a *qué* filas y *bajo qué condiciones*.
--  Este script `init_1.sql` *no* parece estar directamente relacionado con la creación de políticas RLS. 
--  Sin embargo, es importante tener en cuenta estos errores al revisar los *siguientes* archivos `init_2.sql` al `init_9.sql`. 
--  Es posible que la habilitación de RLS y la definición de políticas se realice en scripts posteriores. 
--  Debemos verificar en los próximos archivos si se crean políticas RLS para las tablas mencionadas en los errores de Supabase.