-- Análisis del archivo init_2.sql - Tablas Fundamentales

-- ==============================================
-- ARCHIVO: init_2.sql - Tablas Fundamentales - ANÁLISIS
-- ==============================================
-- Resumen del Propósito:
-- El archivo init_2.sql crea las tablas centrales del sistema: `themes`, `users`, `user_config`, y `subscription_plan_config`. 
-- Refleja una reorganización de esquemas moviendo `users`, `user_config`, y `subscription_plan_config` al esquema 'app' 
-- para proteger datos sensibles, mientras que `themes` se mantiene en 'public' para acceso público.

-- ---------- SECCIÓN 1: TEMAS VISUALES - ANÁLISIS ----------
-- **INCONSISTENCIA DETECTADA**:  Repetición de comandos DROP. 
--  Se listan múltiples comandos DROP para `themes`, `users`, `user_config`, `subscription_plan_config` with and without schema prefixes.
--  Ejemplo: `DROP TABLE IF EXISTS themes CASCADE;` y `DROP TABLE IF EXISTS public.themes CASCADE;`  (similar for other tables).
--  Esto es redundante y puede indicar confusión o copia-pega.  **Recomendación: Eliminar los comandos DROP redundantes.**
-- OK: Tabla `public.themes` bien definida para almacenar información de temas visuales.
-- OK: Uso de CHECK constraints para asegurar el formato hexadecimal de colores (`background_color`, `text_color`, etc.) y valores permitidos para `chat_font_size` y `chat_animation_style`.
-- OK: Uso de CHECK constraint para validar `thumbnail_url` con una expresión regular básica para URLs HTTPS.
-- OK: Índices `idx_themes_name_unique`, `idx_themes_premium`, `idx_themes_non_premium` son adecuados para optimizar consultas.
-- OK: Comentarios descriptivos para la tabla y columnas son detallados y útiles.

-- ---------- SECCIÓN 2: USUARIOS - ANÁLISIS ----------
-- **INCONSISTENCIA DETECTADA**:  Repetición de comandos DROP (como en Sección 1). **Recomendación: Eliminar los comandos DROP redundantes.**
-- OK: Tabla `app.users` bien diseñada para almacenar información de usuarios. Movida correctamente al esquema 'app' como se indica en el propósito del archivo.
-- OK: Uso de CHECK constraints para `username` (formato alfanumérico, puntos y guiones bajos, longitud 3-30), `email` (formato de correo electrónico), `avatar_url`, `default_llm_provider`, `default_temperature`, `message_history_limit`.
-- OK:  `auth_id UUID UNIQUE NOT NULL` correctamente definido para vincular con un sistema de autenticación externo.
-- OK: Foreign Key `theme_id UUID REFERENCES public.themes(id) ON DELETE SET NULL` correctamente referenciando la tabla de temas en el esquema público. `ON DELETE SET NULL` es una buena estrategia para mantener la integridad referencial sin eliminar usuarios si un tema es borrado.
-- OK: Índices únicos `idx_users_username_unique`, `idx_users_email_unique`, `idx_users_auth_id_unique` con `WHERE deleted_at IS NULL` son adecuados para asegurar la unicidad de usuarios activos en caso de soft-delete.
-- OK: Índices adicionales `idx_users_theme`, `idx_users_last_login`, `idx_users_llm_provider`, `idx_users_username_search` optimizan consultas comunes y búsquedas por username (con pg_trgm).
-- OK: Comentarios descriptivos para tabla y columnas son detallados y útiles.

-- ---------- SECCIÓN 3: CONFIGURACIÓN ESPECÍFICA DE USUARIO - ANÁLISIS ----------
-- **INCONSISTENCIA DETECTADA**:  Repetición de comandos DROP (como en Secciones 1 y 2). **Recomendación: Eliminar los comandos DROP redundantes.**
-- **DEPENDENCIA CLAVE DETECTADA**:  Verificación de existencia de `app.system_config` mediante bloque `DO $$ BEGIN IF NOT EXISTS (...) THEN RAISE EXCEPTION ... END IF; END $$;`.
--  **OK**: Esto es CORRECTO y esencial. Asegura que `init_1.sql` (que crea `app.system_config`) debe ejecutarse *antes* de `init_2.sql`.  Excelente manejo de dependencias entre archivos.
-- OK: Tabla `app.user_config` para almacenar configuración específica por usuario. Movida correctamente al esquema 'app'.
-- OK: Foreign Keys `user_id UUID NOT NULL REFERENCES app.users(id) ON DELETE CASCADE` y `config_key TEXT NOT NULL REFERENCES app.system_config(key) ON DELETE CASCADE`  establecen correctamente las relaciones con las tablas de usuarios y configuración global. `ON DELETE CASCADE` para `user_id` es apropiado (si el usuario se elimina, su configuración específica también). `ON DELETE CASCADE` para `config_key` podría ser reconsiderado dependiendo de si se desea mantener configuraciones de usuario huérfanas si una configuración global se elimina (quizás `ON DELETE RESTRICT` o `ON DELETE SET NULL` sería más apropiado para `config_key` si se quiere evitar la eliminación accidental de system configs que todavía se usan in user_config - pero `ON DELETE CASCADE` is acceptable if the intention is to clean up user configs when system config is deleted).
-- OK: `UNIQUE(user_id, config_key)` constraint asegura que cada usuario solo tenga una configuración específica para cada clave de configuración.
-- OK: Índices `idx_user_config_user`, `idx_user_config_key`, `idx_user_config_created_by` para optimizar consultas.
-- OK: Comentarios descriptivos.

-- ---------- SECCIÓN 4: DATOS INICIALES - ANÁLISIS ----------
-- OK: Inserción de temas predefinidos en `public.themes`.
-- OK: Validaciones en los `INSERT` statements de `public.themes` con `ON CONFLICT (name) DO UPDATE SET` son correctas para asegurar idempotencia.
-- **DEPENDENCIA CLAVE DETECTADA**:  Verificación de existencia de `app.system_config` mediante bloque `DO $$ BEGIN IF EXISTS (...) THEN ... ELSE RAISE WARNING ... END IF; END $$;` antes de insertar en `app.subscription_plan_config`.
--  **OK**:  También CORRECTO y esencial.  Refuerza la dependencia de `init_1.sql`.  Usa `RAISE WARNING` en lugar de `RAISE EXCEPTION` si `system_config` no existe, lo cual es más permisivo (la inserción de plan config se omite, pero el script no falla completamente, quizás esto es intencional para despliegues parciales o debug).
-- OK: Inserción de configuración inicial por tipo de suscripción en `app.subscription_plan_config`.
-- OK: Validaciones en los `INSERT` statements de `app.subscription_plan_config` con `ON CONFLICT (plan_type, config_key) DO UPDATE SET` son correctas para asegurar idempotencia.

-- ---------- SECCIÓN 5: FUNCIONES DE COMPATIBILIDAD - ANÁLISIS ----------
-- OK: Creación de `VIEW users`, `VIEW user_config`, `VIEW subscription_plan_config` sin esquema explícito. 
--  **PRECAUCIÓN**:  Estas vistas *dependen* del `search_path` configurado en `init_1.sql`. Si el `search_path` no está correctamente configurado (o si se ejecuta este script en un contexto diferente), estas vistas podrían no apuntar a las tablas 'app.users', 'app.user_config', 'app.subscription_plan_config' como se espera.
--  **Recomendación**:  Para mayor claridad y robustez, especialmente en scripts de inicialización, es *generalmente* mejor usar nombres completamente calificados (esquema.nombre) incluso para vistas, por ejemplo `CREATE OR REPLACE VIEW public.users AS SELECT * FROM app.users;` o  `CREATE OR REPLACE VIEW app.users_view AS SELECT * FROM app.users;` (and same for others, deciding on the schema for the view based on access needs).  Keeping them in 'public' might simplify access in some contexts but using 'app' schema for the views too aligns with moving the tables to 'app'.

-- ---------- SECCIÓN FINAL: NOTIFICACIÓN - ANÁLISIS ----------
-- OK: `RAISE NOTICE` messages informativas.

-- ==============================================
-- RESUMEN GENERAL DEL ARCHIVO init_2.sql - INCONSISTENCIAS Y SUGERENCIAS
-- ==============================================
-- INCONSISTENCIA PRINCIPAL DETECTADA:
--  - **Redundancia de comandos DROP TABLE**. Múltiples comandos DROP para las mismas tablas con y sin prefijo de esquema.  **RECOMENDACIÓN: Eliminar los comandos DROP redundantes para mayor limpieza y evitar confusiones.**

-- DEPENDENCIAS CLAVE CORRECTAMENTE MANEJADAS:
--  - **Dependencia de `init_1.sql`**: El script *correctamente* verifica la existencia de `app.system_config` before creating `app.user_config` and inserting into `app.subscription_plan_config`. Esto asegura la correcta secuencia de ejecución.

-- SUGERENCIAS DE MEJORA:
--  1. **Eliminar comandos DROP redundantes**.  Limpiar la sección de DROPs.
--  2. **Nombres completamente calificados para vistas**: Considerar usar nombres completamente calificados (esquema.nombre) para las vistas de compatibilidad (`users`, `user_config`, `subscription_plan_config`) para evitar dependencias implícitas en el `search_path` y mejorar la claridad. Decidir on the target schema for the views (public or app).
--  3. **Revisar `ON DELETE CASCADE` en `REFERENCES app.system_config(key)` in `app.user_config` and `app.subscription_plan_config`**:  Confirm if `ON DELETE CASCADE` is the desired behavior for `config_key` or if `ON DELETE RESTRICT` or `ON DELETE SET NULL` would be more appropriate to prevent accidental data loss/unexpected behavior if system configurations are deleted.  (Less critical, depends on intended data management strategy for system configs).

-- PRÓXIMO PASO:
--  Por favor, proporciona el siguiente archivo `init_3.sql` para continuar con el análisis secuencial y verificar la consistencia entre archivos.
--  El archivo `init_2.sql` establece tablas fundamentales y demuestra una buena práctica al verificar la dependencia de `init_1.sql`.  La principal área de mejora es la limpieza de comandos DROP y la consideración de nombres completamente calificados para vistas.